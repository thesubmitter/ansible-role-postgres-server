---

- name: define distribution-specific variables
  include_vars: "{{ ansible_os_family }}.yml"

- name: define postgres version-specific variables
  include_vars: "{{ lookup('first_found', params) }}"
  vars:
    params:
      files:
        - "{{ ansible_os_family }}_pg-{{ postgres_server_version }}.yml"
        - "{{ ansible_os_family }}_pg-default.yml"
      paths:
        - "vars"
      skip: true
  ignore_errors: true  # TODO: better solution

- name: create directory for bind mount if necessary
  file:
    path: "{{ postgres_server_bind_mount_var_lib_pgsql_target }}"
    state: directory
  when: postgres_server_bind_mount_var_lib_pgsql

- name: perform bind mount if necessary
  mount:
    path: "/var/lib/pgsql"
    src: "{{ postgres_server_bind_mount_var_lib_pgsql_target }}"
    opts: bind
    state: mounted
    fstype: none
  when: postgres_server_bind_mount_var_lib_pgsql

- name: perform installation
  include_tasks: install/{{ ansible_os_family }}.yml

- name: extend path
  copy:
    dest: /etc/profile.d/postgres-path.sh
    mode: a=rx
    content: "export PATH=$PATH:/usr/pgsql-{{ postgres_server_version }}/bin"

- name: initialize PostgreSQL database cluster
  environment:
    LC_ALL: "en_US.UTF-8"
  vars:
    ansible_become: "{{ postgres_server_initdb_become }}"
    ansible_become_user: "{{ postgres_server_user }}"
  command: "{{ postgres_server_cmd_initdb }}"
  args:
    creates: "{{ postgres_server_data_location }}"

- name: install postgres configuration
  template:
    src: "{{ item }}.j2"
    dest: "{{ postgres_server_config_location }}/{{ item }}"
    owner: postgres
    group: postgres
    mode: u=rw,go=r
  loop:
    - pg_hba.conf
    - postgresql.conf
  notify: restart postgres

- name: start and enable postgres server
  systemd: name={{ postgres_server_service_name }} state=started enabled=yes
#   ignore_errors: true

- name: Create extra users
  become_user: postgres
  become: yes
  postgresql_user:
    name: "{{ item.user }}"
    password: "{{ item.password }}"
    conn_limit: "{{ item.conn_limit|default(none) }}"
  loop: "{{ postgres_server_users|default([]) }}"
 # no_log: true  # secret passwords

# - name: log1
#   command: systemctl status {{ postgres_server_service_name }}
#   ignore_errors: true
#   changed_when: false
#   tags: [skip_ansible_lint]

# - name: log2
#   command: journalctl -xe
#   ignore_errors: true
#   changed_when: false
#   tags: [skip_ansible_lint]
